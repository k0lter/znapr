#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# {{{ Imports
import argparse
import os
import re
import shutil
import subprocess
import sys
import tempfile
import traceback
import urllib.request
import string
import random
import unicodedata
import json
import tarfile
import pathlib
import yaml
from schema import Schema, And, Use, Optional
from datetime import datetime as dt
# }}}

# {{{ Constants
# }}}

# {{{ Logger()
class Logger(object):

    journal = []

    def __init__(self, quiet=False, debug=False):
        self.is_quiet = quiet
        self.is_debug = debug
        self.errors = 0

    def _stdout(self, msg, level, color):
        reset = "\033[0;m"
        if sys.stdout.isatty():
            sys.stdout.write(f"[{color}{level}{reset}] {msg}\n")
        else:
            sys.stdout.write(f"[{level}] {msg}\n")

    def info(self, msg):
        level = 'info'
        self.log(f'[{level}] {msg}')
        if not self.is_quiet or self.is_debug:
            color = "\033[0;92m"
            self._stdout(msg, level, color)

    def warn(self, msg):
        level = 'warn'
        self.log(f'[{level}] {msg}')
        if not self.is_quiet or self.is_debug:
            color = "\033[0;93m"
            self._stdout(msg, level, color)

    def debug(self, msg):
        level = 'debug'
        self.log(f'[{level}] {msg}')
        if self.is_debug:
            color = "\033[0;94m"
            self._stdout(msg, level, color)

    def error(self, msg):
        level = 'error'
        self.log(f'[{level}] {msg}')
        color = "\033[0;91m"
        self._stdout(msg, level, color)
        self.errors += 1

    def trace(self, msg):
        self.log(f'[trace] {msg}')

    def log(self, msg):
        self.journal.append(f"[log] {msg}")


# }}}

# {{{ AutoBackup()
class AutoBackup(object):

    _options = None
    _logger = None

    def __init__(self, options, logger):
        self._options = options
        self._logger = logger

    def _call(self, command, use_shell=False, cwd=None, capture=True):
        rc = -1
        stdout = None
        stderr = None
        cmd = command
        if type(command) is list:
            cmd = ' '.join(command)
        self._logger.debug(f'Invoking: {cmd}')
        try:
            proc = subprocess.run(command, cwd=cwd, capture_output=capture)
            rc = proc.returncode
            stdout = proc.stdout.decode('utf-8') if proc.stdout is not None else ''
            stderr = proc.stderr.decode('utf-8') if proc.stderr is not None else ''
            self._logger.debug(f'Command result: rc=[{rc}] stdout=[{stdout}] stderr=[{stderr}]')
        except Exception as e:
            self._logger.error(f'Error while invoking "{cmd}": {e}')

        return rc, stdout, stderr

    def _get_config_files(self):
        self._logger.info('Scanning config files')
        return pathlib.Path(self._options.config_directory).glob('*.yml')

    def _load_config(self, path):
        config = {}
        self._logger.info(f'Loading config file {path}')
        try:
            with open(path, 'r') as file:
                config = yaml.safe_load(file)
        except Exception as e:
            self._logger.error(f'Unable to load config file {path}: {e}')
        return config

    def _validate_config(self, path, config):
        valid = True
        schema = Schema({
            'name': And(str),
            'zfsroot': And(str),
            'host': And(str),
            'port': And(Use(int), lambda n: 1 < n < 65535),
            'volumes': {
                str: {
                    'source': And(str),
                    'max-days': And(int),
                    Optional('excludes'): [str],
                }
            }
        })

        try:
            schema.validate(config)
        except Exception as e:
            self._logger.error(f'Unable to validate configuration file "{path}": {e}')
            valid = False

        return valid

    def _has_zfsvol(self, vol):
        command = ['zfs', 'list', '-H', '-o', 'name', vol]
        r, out, _ = self._call(command)
        return r == 0 and out.strip() == vol

    def _create_zfsvol(self, vol):
        command = ['zfs', 'create', vol]
        r, _, _ = self._call(command)
        return r == 0

    def _get_zfsvol_mountpoint(self, vol):
        mountpoint = None
        command = ['zfs', 'list', '-H', '-o', 'mountpoint', vol]
        r, out, _ = self._call(command)
        if r == 0 and out.startswith('/'):
            mountpoint = out.strip()
        return mountpoint

    def _backup_data(self, host, port, source, dest, excludes):
        command = [
            'rsync',
            '-e', f'ssh -p {port} -o StrictHostKeyChecking=accept-new',
            '--delete',
            '--archive'
        ]
        if not self._options.quiet and sys.stdout.isatty():
            command += ['--info=progress2', '--no-inc-recursive']
        if excludes is not None:
            for e in excludes:
                command += ['--exclude', e]

        source = source.rstrip('/')
        dest = dest.rstrip('/')

        src = f'{host}:{source}/'
        dst = f'{dest}/'
        command += [src, dst]

        self._logger.info(f'Syncing data from {src} to {dst}')
        r, _, err = self._call(command, capture=self._options.quiet)

        if r != 0:
            msg = f'Something went wrong while trying to sync data from {src} to {dst}'
            if err is not None and err.strip() != '':
                msg = f'{msg}: {err}'
            self._logger.error(msg)

        return r == 0

    def _backup_snapshot(self, vol, days):
        date = dt.now().strftime('%Y-%m-%d_%H.%M.%S')
        snapshot = f'{vol}@{date}--{days}d'
        command = ['zfs', 'snapshot', snapshot]
        r, _, err = self._call(command)
        if r != 0:
            self.logger.error(f'Something went wrong while creating zfs snapshot for {vol}: {err}')
        return r == 0


    def _backup_vol(self, host, port, parent, name, settings):
        zfsvol = f'{parent}/{name}'
        if not self._has_zfsvol(zfsvol):
            self._logger.info(f'Creating ZFS volume {zfsvol}')
            if self._create_zfsvol(zfsvol):
                self._logger.info(f'Volume {zfsvol} successfuly created')
            else:
                self._logger.error(f'Unable to create volume {zfsvol}')

        dest = self._get_zfsvol_mountpoint(zfsvol)
        if dest is not None:
            self._logger.info(f'Found mountpoint for {zfsvol}: {dest}')
        else:
            self._logger.error(f'Unable to find mountpoint for {zfsvol}')
            return

        excludes = settings['excludes'] if 'excludes' in settings else None
        if not self._backup_data(host, port, settings['source'], dest, excludes):
            return

        if not self._backup_snapshot(zfsvol, settings['max-days']):
            return


    def _backup(self, config):
        self._logger.info(f'Loading {config}')

        cnf = self._load_config(config)
        if not self._validate_config(config, cnf):
            self._logger.error(f'Skipping backup related to {config}')
            return

        zfsvol = f'{cnf["zfsroot"]}/{cnf["name"]}'
        if not self._has_zfsvol(zfsvol):
            self._logger.info(f'Creating ZFS volume {zfsvol}')
            if self._create_zfsvol(zfsvol):
                self._logger.info(f'Volume {zfsvol} successfuly created')
            else:
                self._logger.error(f'Unable to create volume {zfsvol}')

        for name, settings in cnf['volumes'].items():
            start = dt.now()
            self._backup_vol(cnf['host'], cnf['port'], zfsvol, name, settings)
            delta = self._datedelta_fmt(start)
            self._logger.info(f'Processing volume {zfsvol}/{name} took {delta}')

    def _datedelta_fmt(self, start, stop=None):
        if stop is None:
            stop = dt.now()
        diff = stop - start
        d = diff.days
        h, r = divmod(diff.seconds, 3600)
        m, s = divmod(r, 60)
        d = f'{d}d' if d > 0 else ''
        h = f'{h}h' if h > 0 else ''
        m = f'{m}m' if m > 0 else ''
        s = f'{s}s'
        return f'{d}{h}{m}{s}'

    def run(self):
        startall = dt.now()

        for config in self._get_config_files():
            start = dt.now()
            self._backup(config)
            delta = self._datedelta_fmt(start)
            self._logger.info(f'Processing {config} took {delta}')

        delta = self._datedelta_fmt(startall)
        self._logger.info(f'Processing all took {delta}')
# }}}

# {{{ main()
def main():

    parser = argparse.ArgumentParser(
        description='Auto Backup',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser.add_argument(
        '-q',
        '--quiet',
        dest='quiet',
        default=False,
        action='store_true',
        help='Be quiet during process',
    )
    parser.add_argument(
        '-d',
        '--debug',
        dest='debug',
        default=False,
        action='store_true',
        help='Print additional debug informations: traceback, etc. (default: no)',
    )
    parser.add_argument(
        '-c',
        '--config-dir',
        dest='config_directory',
        required=True,
        help='Config directory',
    )

    options = parser.parse_args()
    logger = Logger(quiet=options.quiet, debug=options.debug)
    try:
        autobckp = AutoBackup(options, logger)
        autobckp.run()
    except Exception as exc:
        if not options.debug:
            sys.stderr.write(
                f'Exception raised (use --debug option to get more info): {exc}'
            )
        else:
            sys.stderr.write(f'Exception raised: {exc}')
            traceback.print_exc(file=sys.stderr)
        sys.stderr.write('\n' + '\n'.join(logger.journal))
        sys.exit(-1)
    else:
        if logger.errors > 0:
            sys.exit(-2)
# }}}

# {{{ __main__
if __name__ == '__main__':
    main()
# }}}

# vim: foldmethod=marker foldlevel=0 foldenable
