#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# {{{ Imports
import argparse
import os
import re
import shutil
import subprocess
import sys
import tempfile
import traceback
import urllib.request
import string
import random
import unicodedata
import json
import tarfile
import pathlib
import yaml
from schema import Schema, And, Use, Optional
from datetime import datetime as dt

from cleo.application import Application
from cleo.commands.command import Command
from cleo.helpers import argument, option
from cleo.io.outputs.output import Verbosity
# }}}

# {{{ Constants
APP_NAME = "znapr"
APP_VERS = "0.1"

DEFAULT_CONFIG_DIRECTORY = f'/etc/{APP_NAME}'
# }}}

# {{{ ZnaprCommand()
class ZnaprCommand(object):

    def init_styles(self):
        self.add_style("logdebug", fg="white", bg="cyan")
        self.add_style("loginfo", fg="blue")
        self.add_style("logwarn", fg="yellow")
        self.add_style("logerror", fg="white", bg="red")
        self.add_style("cfgdata", fg="cyan")
        self.add_style("data", fg="blue")
        self.add_style("errdata", fg="magenta")
        self.add_style("result", fg="green", options=['bold'])
        self.add_style("datesep", fg="white")

    def log_info(self, msg):
        self.line(f'{msg}', verbosity=Verbosity.VERBOSE)

    def log_info2(self, msg):
        self.line(f'{msg}', verbosity=Verbosity.VERY_VERBOSE)

    def log_warn(self, msg):
        self.line(f'<logwarn>Warning</>: {msg}')

    def log_debug(self, msg):
        self.line(f'<logdebug>D</> {msg}', verbosity=Verbosity.DEBUG)

    def log_error(self, msg):
        self.line_error(f'<logerror>Error</>: {msg}')
# }}}

# {{{ ZnaprBackup()
class ZnaprBackup(Command, ZnaprCommand):

    name = 'backup'
    description = 'Trigger all backups'
    options = [
        option(
            'config-directory',
            'c',
            description='Configuration directory',
            default=DEFAULT_CONFIG_DIRECTORY,
            flag=False
        )
    ]

    def _call(self, command, use_shell=False, cwd=None, capture=True):
        rc = -1
        stdout = None
        stderr = None
        cmd = command
        if type(command) is list:
            cmd = ' '.join(command)
        self.log_debug(f'Invoking: <data>{cmd}</data>')
        try:
            proc = subprocess.run(command, cwd=cwd, capture_output=capture)
            rc = proc.returncode
            stdout = proc.stdout.decode('utf-8') if proc.stdout is not None else ''
            stderr = proc.stderr.decode('utf-8') if proc.stderr is not None else ''
            self.log_debug(f'Command result: rc=[<result>{rc}</result>] stdout=[<data>{stdout}</data>] stderr=[<data>{stderr}</data>]')
        except Exception as e:
            self.log_error(f'Error while invoking "{cmd}": {e}')

        return rc, stdout, stderr

    def _get_config_files(self):
        self.log_info('Scanning config files')
        return pathlib.Path(self.option('config-directory')).glob('*.yml')

    def _load_config(self, path):
        config = None
        self.log_info(f'Loading config file <cfgdata>{path}</cfgdata>')
        try:
            with open(path, 'r') as file:
                config = yaml.safe_load(file)
        except Exception as e:
            self.log_error(f'Unable to load config file <cfgdata>{path}</cfgdata>: <errdata>{e}</errdata>')

        schema = Schema({
            'name': str,
            'zfsroot': str,
            'host': str,
            Optional('port', default=22): And(Use(int), lambda n: 1 < n < 65535),
            Optional('sshkey', default=None): str,
            'volumes': {
                str: {
                    'source': str,
                    'max-days': int,
                    Optional('excludes'): [str],
                }
            }
        })

        try:
            config = schema.validate(config)
        except Exception as e:
            self.log_error(f'Unable to validate configuration file <cfgdata>{path}</cfgdata>": {e}')
            config = None

        if config['sshkey'] is not None and not os.path.exists(config['sshkey']):
            self.log_warn(f"SSH key <cfgdata>{config['sshkey']}</cfgdata> does not seems to be present")

        return config

    def _has_zfsvol(self, vol):
        command = ['zfs', 'list', '-H', '-o', 'name', vol]
        r, out, _ = self._call(command)
        return r == 0 and out.strip() == vol

    def _create_zfsvol(self, vol):
        command = ['zfs', 'create', vol]
        r, _, _ = self._call(command)
        return r == 0

    def _get_zfsvol_mountpoint(self, vol):
        mountpoint = None
        command = ['zfs', 'list', '-H', '-o', 'mountpoint', vol]
        r, out, _ = self._call(command)
        if r == 0 and out.startswith('/'):
            mountpoint = out.strip()
        return mountpoint

    def _backup_data(self, ssh_params, source, dest, excludes):
        ssh_args = f"-o StrictHostKeyChecking=accept-new -p {ssh_params['port']}"
        if ssh_params['sshkey'] is not None:
            ssh_args += f" -i {ssh_params['sshkey']}"
        command = [
            'rsync',
            '-e', f'ssh {ssh_args}',
            '--delete',
            '--archive'
        ]

        if self.io.output.is_very_verbose() and sys.stdout.isatty():
            command += ['--info=progress2', '--no-inc-recursive']
        if excludes is not None:
            for e in excludes:
                command += ['--exclude', e]

        source = source.rstrip('/')
        dest = dest.rstrip('/')

        src = f"{ssh_params['host']}:{source}/"
        dst = f'{dest}/'
        command += [src, dst]

        self.log_info(f'Syncing data from <cfgdata>{src}</cfgdata> to <cfgdata>{dst}</cfgdata>')
        r, _, err = self._call(command, capture=self.io.output.is_very_verbose())

        if r != 0:
            msg = f'Something went wrong while trying to sync data from <cfgdata>{src}</cfgdata> to <cfgdata>{dst}</cfgdata>'
            if err is not None and err.strip() != '':
                msg = f'<data>{msg}</data>: <errdata>{err}</errdata>'
            self.log_error(msg)

        return r == 0

    def _backup_snapshot(self, vol, days):
        date = dt.now().strftime('%Y-%m-%d_%H.%M.%S')
        snapshot = f'{vol}@{date}--{days}d'
        command = ['zfs', 'snapshot', snapshot]
        r, _, err = self._call(command)
        if r != 0:
            self.logger.error(f'Something went wrong while creating zfs snapshot for <data>{vol}</data>: <errdata>{err}</errdata>')
        return r == 0


    def _backup_vol(self, ssh_params, parent, name, settings):
        zfsvol = f'{parent}/{name}'
        if not self._has_zfsvol(zfsvol):
            self.log_info(f'Creating ZFS volume <cfgdata>{zfsvol}</cfgdata>')
            if self._create_zfsvol(zfsvol):
                self.log_info(f'Volume <cfgdata>{zfsvol}</cfgdata> successfuly created')
            else:
                self.log_error(f'Unable to create volume <data>{zfsvol}</data>')

        dest = self._get_zfsvol_mountpoint(zfsvol)
        if dest is not None:
            self.log_info2(f'Found mountpoint for <cfgdata>{zfsvol}</cfgdata>: <cfgdata>{dest}</cfgdata>')
        else:
            self.log_error(f'Unable to find mountpoint for <data>{zfsvol}</data>')
            return

        excludes = settings['excludes'] if 'excludes' in settings else None
        if not self._backup_data(ssh_params, settings['source'], dest, excludes):
            return

        if not self._backup_snapshot(zfsvol, settings['max-days']):
            return


    def _backup(self, config):
        cnf = self._load_config(config)
        if cnf is None:
            self.log_error(f'Skipping backup related to <cfgdata>{config}</cfgdata>')
            return

        zfsvol = f'{cnf["zfsroot"]}/{cnf["name"]}'
        if not self._has_zfsvol(zfsvol):
            self.log_info(f'Creating ZFS volume <cfgdata>{zfsvol}</cfgdata>')
            if self._create_zfsvol(zfsvol):
                self.log_info(f'Volume <cfgdata>{zfsvol}</cfgdata> successfuly created')
            else:
                self.log_error(f'Unable to create volume <data>{zfsvol}</data>')

        ssh_params = {k:cnf[k] for k in ['host', 'port', 'sshkey']}

        for name, settings in cnf['volumes'].items():
            start = dt.now()
            self._backup_vol(ssh_params, zfsvol, name, settings)
            delta = self._datedelta_fmt(start)
            self.log_info(f'Processing volume <cfgdata>{zfsvol}/{name}</cfgdata> took <result>{delta}</result>')

    def _datedelta_fmt(self, start, stop=None):
        if stop is None:
            stop = dt.now()
        diff = stop - start
        d = diff.days
        h, r = divmod(diff.seconds, 3600)
        m, s = divmod(r, 60)
        d = f'{d}<datesep>d</datesep>' if d > 0 else ''
        h = f'{h}<datesep>h</datesep>' if h > 0 else ''
        m = f'{m}<datesep>m</datesep>' if m > 0 else ''
        s = f'{s}<datesep>s</datesep>'
        return f'{d}{h}{m}{s}'

    def handle(self):
        self.init_styles()
        startall = dt.now()
        for config in self._get_config_files():
            start = dt.now()
            self._backup(config)
            delta = self._datedelta_fmt(start)
            self.log_info(f'Processing <cfgdata>{config}</cfgdata> took <result>{delta}</result>')

        delta = self._datedelta_fmt(startall)
        self.log_info(f'Processing <cfgdata>all</cfgdata> took <result>{delta}</result>')
# }}}

# {{{ main()
application = Application(name=APP_NAME, version=APP_VERS)
application.add(ZnaprBackup())

if __name__ == "__main__":
        application.run()
# }}}

# vim: foldmethod=marker foldlevel=0 foldenable
